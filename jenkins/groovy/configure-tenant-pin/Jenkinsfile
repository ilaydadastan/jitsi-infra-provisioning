
def checkReleaseBackends(environment) {
    def ret = 'false';
    def useReleaseBackends = sh(
       returnStdout: true,
       script: """#!/bin/bash
. ./sites/${environment}/stack-env.sh
echo \$USE_RELEASE_BACKENDS"""
    ).trim();

    if (useReleaseBackends.length() > 0) {
        ret = useReleaseBackends;
    }

    return ret;
}

def getVersioningManagerURL(environment) {
    def versioningManagerDeployed = 'false';
    def ret = 'false';
    def versioningManagerURL = sh(
       returnStdout: true,
       script: """#!/bin/bash
. ./sites/${environment}/stack-env.sh
echo \$VERSIONING_URL"""
    ).trim();

    if (versioningManagerURL.length() > 0) {
        ret = versioningManagerURL;
    }

    return ret;
}

def updateConsulPin(environment, tenant, release_number) {
    echo 'updating pin in consul'
    sh(
        script: "ENVIRONMENT=${environment} PIN_ACTION=SET_PIN TENANT=${tenant} RELEASE_NUMBER=${release_number} scripts/consul-set-tenant-pin.sh ubuntu"
    )
}

def deleteConsulPin(environment, tenant) {
    echo 'deleting pin in consul'
    sh(
        script: "ENVIRONMENT=${environment} PIN_ACTION=DELETE_PIN TENANT=${tenant} scripts/consul-set-tenant-pin.sh ubuntu"
    )
}

def updateVersioningPin(environment, tenant, release_number) {
    echo 'updating pin in versioning-manager'
    sh(
        script: "DEBUG=true ENVIRONMENT=${environment} VERSIONING_ACTION=SET_TENANT_PIN TENANT=${tenant} RELEASE_NUMBER=${release_number} scripts/versioning-manager.sh ubuntu"
    )
}

def deleteVersioningPin(environment, tenant) {
    echo 'deleting pin in versioning-manager'
    sh(
        script: "ENVIRONMENT=${environment} VERSIONING_ACTION=DELETE_TENANT_PIN TENANT=${tenant} scripts/versioning-manager.sh ubuntu"
    )
}

pipeline {
    agent any
    options {
        ansiColor('xterm')
        timestamps()
    }
    stages {
        stage ("setup") {
            steps {
                script {
                    // load utility function
                    def rootDir = pwd()
                    utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
                    // checkout repos
                    utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

                    // setup OCI credentials
                    utils.SetupOCI()

                    sh 'mkdir -p test-results'
                }
            }
        }
        stage ("check that environment supports release backends") {
            steps {
                script {
                    dir("infra-provisioning") {
                        useReleaseBackends = checkReleaseBackends(env.ENVIRONMENT)
                        if (useReleaseBackends != 'true') {
                            error 'environment does not support tenant pinning'
                        }
                    }
                }
            }
        }
        stage ("check if versionining-manager is used for tenant pins in this environment") {
            steps {
                script{ 
                    dir("infra-provisioning") {
                        versioningManagerURL = getVersioningManagerURL(env.ENVIRONMENT)
                        if (versioningManagerURL != 'false') {
                            versioningManagerDeployed = 'true'
                        }
                    }
                }
            }
        }
        stage ("modify tenant pin in consul") {
            when {
                allOf {
                    expression { useReleaseBackends == 'true' }
                    expression { versioningManagerDeployed != 'true' }
                }
            }
            steps {
                script {
                    echo "PIN_ACTION: ${env.PIN_ACTION}"
                    if (env.PIN_ACTION == 'SET_PIN') {
                        dir("infra-provisioning") {
                            withCredentials([
                                string(credentialsId: 'oci-jenkins-terraform-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                                string(credentialsId: 'oci-jenkins-terraform-aws-id', variable: 'AWS_ACCESS_KEY_ID')
                            ]) {
                                sshagent(credentials: ['ssh-ubuntu']) {
                                    updateConsulPin(env.ENVIRONMENT, env.CUSTOMER_ID, env.RELEASE_NUMBER)
                                }
                            }
                        }
                    } else if (env.PIN_ACTION == 'DELETE_PIN') {
                        dir("infra-provisioning") {
                            withCredentials([
                                string(credentialsId: 'oci-jenkins-terraform-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                                string(credentialsId: 'oci-jenkins-terraform-aws-id', variable: 'AWS_ACCESS_KEY_ID')
                            ]) {
                                sshagent(credentials: ['ssh-ubuntu']) {
                                    deleteConsulPin(env.ENVIRONMENT, env.CUSTOMER_ID)
                                }
                            }
                        }
                    } else {
                        error 'invalid PIN_ACTION; should be SET_PIN or DELETE_PIN'
                    }
                }
            }
        }
        stage ("modify pin in versioning-manager") {
            when {
                allOf {
                    expression { useReleaseBackends == 'true' }
                    expression { versioningManagerDeployed == 'true' }
                }
            }
            steps {
                script {
                    echo "PIN_ACTION: ${env.PIN_ACTION}"
                    if (env.PIN_ACTION == 'SET_PIN') {
                        dir("infra-provisioning") {
                            withCredentials([
                                string(credentialsId: 'oci-jenkins-terraform-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                                string(credentialsId: 'oci-jenkins-terraform-aws-id', variable: 'AWS_ACCESS_KEY_ID')
                            ]) {
                                sshagent(credentials: ['ssh-ubuntu']) {
                                    updateVersioningPin(env.ENVIRONMENT, env.CUSTOMER_ID, env.RELEASE_NUMBER)
                                }
                            }
                        }
                    } else if (env.PIN_ACTION == 'DELETE_PIN') {
                        dir("infra-provisioning") {
                            withCredentials([
                                string(credentialsId: 'oci-jenkins-terraform-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                                string(credentialsId: 'oci-jenkins-terraform-aws-id', variable: 'AWS_ACCESS_KEY_ID')
                            ]) {
                                sshagent(credentials: ['ssh-ubuntu']) {
                                    deleteVersioningPin(env.ENVIRONMENT, env.CUSTOMER_ID)
                                }
                            }
                        }
                    } else {
                        error 'invalid PIN_ACTION; should be SET_PIN or DELETE_PIN'
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'test-results/**'
            // Clean up afterwards
            cleanWs()
        }
    }
}
